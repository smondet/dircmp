open build/OCaml

.PHONY: lib app doc \
        install install_lib install_app install_doc \
        uninstall uninstall_lib uninstall_app \
        clean distclean

################################################################################
# Primary Commands
install: install_lib install_app
uninstall: uninstall_lib uninstall_app

clean:
  rm -rf _build

distclean: clean
  rm -rf OMakeroot.omc .omakedb .omakedb.lock configure.omc


################################################################################
# General Project Information
PROJECT_NAME = dircmp
VERSION = 1.1-dev
LIB_NAME = $(PROJECT_NAME)
APP_NAME = $(PROJECT_NAME)
LIB_DESCRIPTION = Compute and compare statistics on large directories.
API_DOC_TITLE = "Dircmp API"

DEPENDENCIES = unix
PACKAGES = $(DEPENDENCIES)

LIB_MODULES[] =
  dircmp_internal_pervasives
  dircmp
  dircmp_about
  dircmp_file_tree

LIB_SOURCES = $(add-wrapper src/lib, .ml, $(LIB_MODULES))


################################################################################
# Directory Names
BUILD_DIR = _build

.INCLUDE: configure.om
  if $(not $(file-exists configure.om))
    echo "Generating default configure.om file." >> $(BUILD_SUMMARY)
    echo "PREFIX=$(BUILD_DIR)" > configure.om

DefineCommandVars() # executing here allows overriding PREFIX

BINDIR = $(PREFIX)/bin
DOCDIR = $(PREFIX)/doc

DefineCommandVars() # executing here allows overriding BINDIR and DOCDIR

LIB_DIR = lib
APP_DIR = app
API_DIR = api

################################################################################
# Build Parameters
USE_OCAMLFIND = true
if $(not $(OCAMLFIND_EXISTS))
   eprintln(Required package ocamlfind not found.)
   exit 1

NATIVE_ENABLED = $(OCAMLOPT_EXISTS)
BYTE_ENABLED = $(OCAMLC_EXISTS)

OCAMLFLAGS = -bin-annot -annot -warn-error P -thread
OCAMLCFLAGS =
OCAMLOPTFLAGS =
OCAML_LINK_FLAGS +=
OCAML_BYTE_LINK_FLAGS =
OCAML_NATIVE_LINK_FLAGS =
OCAMLFINDFLAGS =

.SUBDIRS: .
  mkdir -p $(BUILD_DIR)/$(LIB_DIR)
  mkdir -p $(BUILD_DIR)/$(APP_DIR)
  vmount(-l, src/, $(BUILD_DIR)/)

  ################################################################################
  # Library
  .SUBDIRS: $(BUILD_DIR)/$(LIB_DIR)

    dircmp_about.ml: :value: $(VERSION)
      echo '(** Version of the library. Currently $(VERSION). *)' > $@
      echo 'let version = "$(VERSION)"' >> $@

    META:
      echo "description = \"$(LIB_DESCRIPTION)\"" > $@
      echo "version = \"$(VERSION)\"" >> $@
      echo "archive(byte) = \"$(LIB_NAME).cma\"" >> $@
      echo "archive(native) = \"$(LIB_NAME).cmxa\"" >> $@
      echo "requires = \"$(DEPENDENCIES)\"" >> $@

    lib: $(OCamlLibrary $(LIB_NAME), $(LIB_MODULES))
    .DEFAULT: lib

    install_lib: $(LIB_NAME).cma $(LIB_NAME).cmxa META uninstall_lib
      ocamlfind install $(LIB_NAME) META \
        *.cm[iox] *.o $(LIB_NAME).cma $(LIB_NAME).cmxa *.a

    uninstall_lib:
      ocamlfind remove $(LIB_NAME)


  ################################################################################
  # Command Line App
  .SUBDIRS: $(BUILD_DIR)/$(APP_DIR)
    OCAML_LIBS = ../$(LIB_DIR)/$(LIB_NAME)
    OCAMLINCLUDES += $(dir ../$(LIB_DIR))
    OCAMLPACKS[] = $(PACKAGES)

    app: $(OCamlProgram $(APP_NAME), main)
    .DEFAULT: app

    install_app: $(APP_NAME)
      echo "Installing $< in $(BINDIR)" >> $(BUILD_SUMMARY) 
      mkdir -p $(BINDIR)
      install $< $(BINDIR)

    uninstall_app:
      echo "Removing $(APP_NAME) from $(BINDIR)" >> $(BUILD_SUMMARY)
      rm -f $(BINDIR)/$(APP_NAME)


  ################################################################################
  # API Documentation
  .SUBDIRS: $(BUILD_DIR)
    $(API_DIR)/index.html: lib
      rm -rf $(API_DIR)
      mkdir $(API_DIR)
      ocamlfind ocamldoc \
        $(OCAMLFINDFLAGS) \
        -package $(concat \,, $(PACKAGES)) \
        -charset UTF-8 \
        -d $(API_DIR) \
        -t $(API_DOC_TITLE) \
        -keep-code \
        -colorize-code \
        -sort \
        -html \
        -I $(LIB_DIR) \
        $(LIB_DIR)/*.ml

    doc: $(API_DIR)/index.html

    install_doc: doc
      X = $(DOCDIR)/$(PROJECT_NAME)
      echo "Installing documentation in $(X)" >> $(BUILD_SUMMARY)
      rm -rf $(X)
      mkdir -p $(X)
      cp -Rp $(API_DIR) $(X)/
